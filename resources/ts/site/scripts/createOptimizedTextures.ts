import { TextureCompressionUtils } from './TextureCompressionUtils';

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π —Ç–µ–∫—Å—Ç—É—Ä
 * –°–æ–∑–¥–∞–µ—Ç WebP, AVIF –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
 */

interface OptimizationTask {
    inputPath: string;
    outputBaseName: string;
    formats: ('webp' | 'avif' | 'jpg')[];
    qualities: ('low' | 'medium' | 'high')[];
}

class TextureOptimizationTool {
    private static instance: TextureOptimizationTool;
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D;

    private constructor() {
        this.canvas = document.createElement('canvas');
        this.ctx = this.canvas.getContext('2d')!;
    }

    public static getInstance(): TextureOptimizationTool {
        if (!TextureOptimizationTool.instance) {
            TextureOptimizationTool.instance = new TextureOptimizationTool();
        }
        return TextureOptimizationTool.instance;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
     */
    async optimizeProjectTextures(): Promise<void> {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ç–µ–∫—Å—Ç—É—Ä –ø—Ä–æ–µ–∫—Ç–∞...');

        const tasks: OptimizationTask[] = [
            {
                inputPath: '/public/models/lamp/lamp-texture.jpg',
                outputBaseName: 'lamp-texture',
                formats: ['webp', 'jpg'],
                qualities: ['low', 'medium', 'high']
            },
            {
                inputPath: '/public/models/lamp/env-13.webp',
                outputBaseName: 'env-13',
                formats: ['webp', 'jpg'],
                qualities: ['low', 'medium', 'high']
            },
            {
                inputPath: '/public/models/lamp/env-3.jpg',
                outputBaseName: 'env-3',
                formats: ['webp', 'jpg'],
                qualities: ['low', 'medium', 'high']
            },
            {
                inputPath: '/public/models/lamp/env-4.jpg',
                outputBaseName: 'env-4',
                formats: ['webp', 'jpg'],
                qualities: ['low', 'medium', 'high']
            },
            {
                inputPath: '/public/models/lamp/env-7.jpg',
                outputBaseName: 'env-7',
                formats: ['webp', 'jpg'],
                qualities: ['low', 'medium', 'high']
            },
            {
                inputPath: '/public/models/lamp/env-9.jpg',
                outputBaseName: 'env-9',
                formats: ['webp', 'jpg'],
                qualities: ['low', 'medium', 'high']
            }
        ];

        const results = [];
        for (const task of tasks) {
            try {
                const result = await this.processOptimizationTask(task);
                results.push(result);
                console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${task.inputPath}`);
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${task.inputPath}:`, error);
            }
        }

        console.log('üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        this.generateOptimizationReport(results);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
     */
    private async processOptimizationTask(task: OptimizationTask): Promise<any> {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const img = await TextureCompressionUtils.loadImage(task.inputPath);
            const originalInfo = await TextureCompressionUtils.getTextureInfo(task.inputPath);

            console.log(`üìä –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${originalInfo.width}x${originalInfo.height}, ${(originalInfo.size / 1024).toFixed(1)}KB`);

            const optimizedVersions = [];

            // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞
            for (const quality of task.qualities) {
                for (const format of task.formats) {
                    const optimized = await this.createOptimizedVersion(img, format, quality);
                    optimizedVersions.push({
                        quality,
                        format,
                        ...optimized,
                        fileName: `${task.outputBaseName}-${quality}.${format}`
                    });
                }
            }

            // –°–æ–∑–¥–∞–µ–º WebGL-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            const webglOptimized = await TextureCompressionUtils.optimizeForWebGL(img, {
                quality: 85,
                format: 'webp'
            });

            optimizedVersions.push({
                quality: 'webgl',
                format: 'webp',
                ...webglOptimized,
                fileName: `${task.outputBaseName}-webgl.webp`
            });

            return {
                original: originalInfo,
                optimized: optimizedVersions,
                inputPath: task.inputPath,
                outputBaseName: task.outputBaseName
            };

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏:`, error);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private async createOptimizedVersion(
        img: HTMLImageElement,
        format: 'webp' | 'avif' | 'jpg',
        quality: 'low' | 'medium' | 'high'
    ) {
        const qualitySettings = {
            low: { quality: 60, maxWidth: 512, maxHeight: 512 },
            medium: { quality: 75, maxWidth: 1024, maxHeight: 1024 },
            high: { quality: 90, maxWidth: 2048, maxHeight: 2048 }
        };

        const settings = qualitySettings[quality];

        return await TextureCompressionUtils.convertImage(img, {
            format,
            quality: settings.quality,
            maxWidth: settings.maxWidth,
            maxHeight: settings.maxHeight
        });
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
     */
    private generateOptimizationReport(results: any[]) {
        console.log('\nüìã –û–¢–ß–ï–¢ –û–ë –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –¢–ï–ö–°–¢–£–†');
        console.log('=' .repeat(50));

        let totalOriginalSize = 0;
        let totalOptimizedSize = 0;

        results.forEach(result => {
            console.log(`\nüìÅ ${result.inputPath}`);
            console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(result.original.size / 1024).toFixed(1)}KB`);
            
            totalOriginalSize += result.original.size;

            result.optimized.forEach((opt: any) => {
                const compressionRatio = ((result.original.size - opt.info.size) / result.original.size * 100);
                console.log(`   ${opt.fileName}: ${(opt.info.size / 1024).toFixed(1)}KB (${compressionRatio.toFixed(1)}% —ç–∫–æ–Ω–æ–º–∏–∏)`);
                totalOptimizedSize += opt.info.size;
            });
        });

        const totalSavings = ((totalOriginalSize - totalOptimizedSize) / totalOriginalSize * 100);
        console.log('\nüíæ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(totalOriginalSize / 1024 / 1024).toFixed(1)}MB`);
        console.log(`   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${(totalOptimizedSize / 1024 / 1024).toFixed(1)}MB`);
        console.log(`   –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${totalSavings.toFixed(1)}%`);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        this.generateRecommendations(results);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
     */
    private generateRecommendations(results: any[]) {
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('=' .repeat(30));

        console.log('1. –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ—Ä—Å–∏–∏ -low');
        console.log('2. –î–ª—è –ø–ª–∞–Ω—à–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ—Ä—Å–∏–∏ -medium');
        console.log('3. –î–ª—è desktop –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ—Ä—Å–∏–∏ -high');
        console.log('4. WebGL-–≤–µ—Ä—Å–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è Three.js');
        console.log('5. WebP –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ª—É—á—à–µ–µ —Å–∂–∞—Ç–∏–µ –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –±—Ä–∞—É–∑–µ—Ä–æ–º');

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è TextureOptimizer
        console.log('\nüîß –ü–†–ò–ú–ï–† –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:');
        console.log(`
// –û–±–Ω–æ–≤–∏—Ç–µ selectOptimalFormat –≤ TextureOptimizer.ts:
private selectOptimalFormat(config: TextureConfig): string {
    const basePath = config.path.replace(/\\.[^/.]+$/, "");
    const quality = config.quality || 'medium';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É WebP
    if (this.supportsWebP()) {
        return \`\${basePath}-\${quality}.webp\`;
    }
    
    // Fallback –∫ JPEG
    return \`\${basePath}-\${quality}.jpg\`;
}
        `);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã–π –∞—Ç–ª–∞—Å –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç—É—Ä
     */
    async createTextureAtlas(texturePaths: string[], atlasSize: number = 2048): Promise<any> {
        console.log('üé® –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã–π –∞—Ç–ª–∞—Å...');

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const images = await Promise.all(
                texturePaths.map(path => TextureCompressionUtils.loadImage(path))
            );

            // –°–æ–∑–¥–∞–µ–º –∞—Ç–ª–∞—Å
            const atlas = await TextureCompressionUtils.createTextureAtlas(images, atlasSize);

            console.log(`‚úÖ –ê—Ç–ª–∞—Å —Å–æ–∑–¥–∞–Ω: ${atlasSize}x${atlasSize}, ${(atlas.blob.size / 1024).toFixed(1)}KB`);
            console.log('üìç –ö–∞—Ä—Ç–∞ —Ç–µ–∫—Å—Ç—É—Ä:', atlas.mapping);

            return atlas;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ç–ª–∞—Å–∞:', error);
            throw error;
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
     */
    async analyzeProjectTextures(): Promise<void> {
        console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');

        const texturePaths = [
            '/public/models/lamp/lamp-texture.jpg',
            '/public/models/lamp/env-13.webp',
            '/public/models/lamp/env-3.jpg',
            '/public/models/lamp/env-4.jpg',
            '/public/models/lamp/env-7.jpg',
            '/public/models/lamp/env-9.jpg'
        ];

        for (const path of texturePaths) {
            try {
                const analysis = await TextureCompressionUtils.analyzeTexture(path);
                
                console.log(`\nüìä ${path}:`);
                console.log(`   –†–∞–∑–º–µ—Ä: ${analysis.info.width}x${analysis.info.height}`);
                console.log(`   –§–æ—Ä–º–∞—Ç: ${analysis.info.format.toUpperCase()}`);
                console.log(`   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(analysis.info.size / 1024).toFixed(1)}KB`);
                console.log(`   –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${(analysis.estimatedSavings * 100).toFixed(1)}%`);
                
                if (analysis.recommendations.length > 0) {
                    console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
                    analysis.recommendations.forEach(rec => console.log(`   ‚Ä¢ ${rec}`));
                }

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${path}:`, error);
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
     */
    async createPreviewGallery(imagePath: string): Promise<string[]> {
        console.log(`üñºÔ∏è –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è ${imagePath}...`);

        try {
            const img = await TextureCompressionUtils.loadImage(imagePath);
            const previews: string[] = [];

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤
            const qualities = ['low', 'medium', 'high'];
            
            for (const quality of qualities) {
                const optimized = await this.createOptimizedVersion(img, 'webp', quality as any);
                
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é 256x256
                const previewImg = new Image();
                previewImg.src = optimized.dataUrl;
                
                await new Promise(resolve => {
                    previewImg.onload = resolve;
                });

                const preview = TextureCompressionUtils.createPreview(previewImg, 256);
                previews.push(preview);
                
                console.log(`   ${quality}: ${(optimized.info.size / 1024).toFixed(1)}KB`);
            }

            return previews;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é:', error);
            throw error;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
(window as any).optimizeTextures = async () => {
    const tool = TextureOptimizationTool.getInstance();
    await tool.optimizeProjectTextures();
};

(window as any).analyzeTextures = async () => {
    const tool = TextureOptimizationTool.getInstance();
    await tool.analyzeProjectTextures();
};

(window as any).createTextureAtlas = async (paths: string[], size = 2048) => {
    const tool = TextureOptimizationTool.getInstance();
    return await tool.createTextureAtlas(paths, size);
};

export { TextureOptimizationTool }; 